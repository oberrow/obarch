Register names (General Purpose 16-bit):
    0x00: R1
    0x01: R2
    0x02: R3
    0x03: R4
    0x04: R5
    0x05: R6
    0x06: R7
    0x07: R8
Register names (Specific-Purpose 16-bit):
    0x08: SP (Stack pointer)
    0x09: IP (Instruction pointer)
    0x0A: FLAGS
Registers that may only accessed by the CPU:
  INTERN
  Operand1
  Operand2
  Control
Capabilities:
  Adding registers.
  Subtracting registers.
  Load immediate values to registers.
  Move registers to registers.
  Move memory to registers (and vice versa)
  Jumping to places (rather unconditionally or conditionally)
Definitions:
  r/16: The opcode of a 16-bit registers (See "Register names (16-bit)").
  m/16: A memory address that points to a 16-bit value.
  imm/16: A 16-bit immediate.
Instructions (could change soon):
  0x00 Size 1					: nop				; No operation
  0x01 r/16 r/16, Size 3		: add r/16, r/16	; Adds the first operand to the second, storing the result in the first operand.
  0x02 r/16 r/16, Size 3		: sub r/16, r/16	; Does the same as add, but subtracts
  0x03 r/16 imm/16, Size 4		: mov r/16, imm/16	; Sets the first operand to the second
  0x04 r/16 r/16, Size 3		: mov r/16, r/16	; ^
  0x05 m/16 r/16, Size 4		: mov m/16, r/16	; ^
  0x06 r/16 m/16, Size 4		: mov r/16, m/16	; ^
  0x07 imm/16, Size 3			: jmp imm/16		; Sets IP to imm
  0x08 r/16, Size 3				: jmp r/16			; Sets IP to r/16
  0x09 r/16, Size 2				: push r/16			; mov INTERN, 2; sub SP, INTERN; mov [SP], Operand1
  0x0A r/16, Size 2				: pop r/16			; mov INTERN, 2; mov Operand1, [SP]; add SP, INTERN;
  0x0B imm/8, Size 2			: call imm/16		; Pushes a pointer to the next instruction, then jumps to imm.
  0x0C Size 1					: ret				; pop IP
  0x0D r/16 r/16, Size 3		: and r/16, r/16	; Does the same as add, but does a binary "and".
  0x0E r/16 r/16, Size 3		: or r/16, r/16		; Does the same as add, but does a binary "or".
  0x0F r/16, Size 2				: not r/16			; Does a binary not on r/16.
  0x10 Size 1					: hltclk			; Stops the CPU by stopping the clock.
  0x11 Size 1					: nop				; Reserved
  0x12 Size 1					: nop				; Reserved
  0x13 Size 1					: nop				; Reserved
  0x14 r/16, Size 2				: call r/16			; Pushes a pointer to the next instruction, then jumps to r/16 & 0xFF
  0x15 Size 1					: pop				; mov INTERN, 2; add SP, INTERN;
  0x16 r/16, Size 2				: out r/16			; Implementation-specific. On obarch-emulator, it will print the register followed by a newline.
  0x17 r/16, Size 2				: outc r/16			; Implementation-specific. On obarch-emulator, it will print the register as a character. The register can't be SP.
  0x18 imm/8, imm/8, Size 3		: jCC imm/16		; Jump on condition. First operand is the condition (see table 1 for the conditions and their ids). The second operand is where to jump.
  0x19 r/16, r/16, Size 3		: cmp r/16, r/16	; Compares the first operand with the second operand.
  0x1A imm/16, Size 3			: push imm/16		; Does the same as push r/16 but with an immediate.
  0x1B r/16 Size 2				: inc r/16			; Increments the first operand.
  0x1C r/16 Size 2				: dec r/16			; Decrements the first operand.
  0x1D r/16 imm/16, Size 4		: cmp r/16, imm/16	; Compares the first operand with the second operand.
Tables:
  Conditions:
    Zero (Equal)	 : 0x01
    Not Zero (Equal) : 0xFE
    Less			 : 0x02
    Not Less		 : 0xFD
    Greater			 : 0x04
    Not Greater		 : 0xFB
  Flags Bitfield:
    Zero	: 1
    Less	: 2
    Greater: 4